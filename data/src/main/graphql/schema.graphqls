"""
This is the query type
"""
type Query {
  """
  This is the user info
  """
  userInfo: User

  """
  This is the refresh token
  """
  refreshToken: RefreshTokenType

  """
  get user book
  """
  getUserBook("" bookId: String): UserBook

  """
  get user books
  """
  getUserBooks("" sortBy: String, "" filterBy: String, "" page: Int, "" limit: Int, "" keyword: String): GetUserBooks

  getBooks("" category: String, "" sort: String, "" page: Int, "" limit: Int): GetBooks

  getBook("" bookId: String): BookInfo

  getBookReviews("" bookId: String, "" sort: String, "" page: Int, "" limit: Int): GetBookReviews

  getBookReview("" reviewId: String): ReviewBook

  getBooksFromRecycleBin("" sortBy: String, "" filterBy: String, "" page: Int, "" limit: Int, "" keyword: String): GetBooksFromRecyclePinType

  search("" categories: [String], "" keyword: String, "" sort: String, "" page: Int, "" limit: Int): SearchType

  """
  get user books
  """
  adminGetBooks("" sortBy: String, "" filterBy: String, "" page: Int, "" limit: Int, "" keyword: String): AdminGetBooks

  getShelf("" shelf: String, "" user: String, "" booksLimit: Int, "" booksPage: Int): ShelfType

  getLibrary("" user: String, "" limit: Int, "" page: Int): Library

  adminGetAllCategories("" limit: Int, "" page: Int, "" completed: Boolean): AdminGetAllCategories

  getAllCategories("" limit: Int, "" page: Int): GetAllCategories

  getOffer("" id: String): OfferType

  getAllOffers("" page: Int, "" limit: Int, "" sort: String): GetAllOffers
}

"""
This is the user type
"""
type User {
  _id: ID

  name: String

  email: String

  avatar: File

  updatedAt: String

  createdAt: String
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
this is book file type
"""
type File {
  _id: ID

  name: String

  size: Float

  path: String
}

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""
refresh token type
"""
type RefreshTokenType {
  message: String

  refresh_token: String
}

"""
This book datails
"""
type UserBook {
  _id: ID

  name: String

  description: String

  isbn: String

  edition: Int

  publishingRights: Boolean

  categories: [CategroyType]

  avgRate: Int

  price: Float

  language: String

  author: Author

  sample: File

  cover: File

  file: File

  status: String

  createdAt: String

  updatedAt: String

  publishionDate: String

  rejectionReasons: String
}

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

"""
This books category type
"""
type CategroyType {
  _id: ID

  name_ar: String

  name_en: String

  icon: File

  createdAt: String

  updatedAt: String
}

"""
this is book author type
"""
type Author {
  _id: ID

  name: String

  avatar: String
}

"""
This is the user books type
"""
type GetUserBooks {
  books: [UserBook]

  currentPage: Int

  numberOfPages: Int

  total: Int
}

"""
This is the user books type
"""
type GetBooks {
  books: [BookInfo]

  currentPage: Int

  numberOfPages: Int

  total: Int
}

"""
This book datails
"""
type BookInfo {
  _id: ID

  name: String

  description: String

  isbn: String

  edition: Int

  publishingRights: Boolean

  categories: [CategroyType]

  avgRate: Int

  price: Float

  language: String

  author: Author

  sample: File

  cover: File

  createdAt: String

  updatedAt: String

  publishionDate: String
}

"""
this is book reviews type
"""
type GetBookReviews {
  reviews: [ReviewBook]

  currentPage: Int

  numberOfPages: Int

  total: Int
}

"""
this is book review type
"""
type ReviewBook {
  _id: ID

  rate: Float

  content: String

  user: Author

  bookId: String

  likes: [String]

  createdAt: String

  updatedAt: String
}

"""
this is type of get books from recycle pin type
"""
type GetBooksFromRecyclePinType {
  books: [UserBook]

  currentPage: Int

  numberOfPages: Int

  total: Int
}

"""
This is the search books type
"""
type SearchType {
  books: [BookInfo]

  currentPage: Int

  numberOfPages: Int

  total: Int
}

"""
This is the user books type
"""
type AdminGetBooks {
  books: [AdminBookType]

  currentPage: Int

  numberOfPages: Int

  total: Int
}

type AdminBookType {
  _id: ID

  name: String

  description: String

  isbn: String

  edition: Int

  publishingRights: Boolean

  categories: [CategroyType]

  avgRate: Int

  price: Float

  language: String

  author: Author

  sample: File

  cover: File

  file: File

  status: String

  createdAt: String

  updatedAt: String

  publishionDate: String

  rejectionReasons: String

  reviewer: Admin
}

"""
this is admin type
"""
type Admin {
  _id: ID

  name: String

  email: String

  avatar: File

  updatedAt: String

  createdAt: String
}

"""
This liberary shelf data
"""
type ShelfType {
  _id: ID

  name: String

  books: [BookInfo]

  totalBooks: Int

  numberOfBooksPages: Int

  currentBooksPage: Int

  createdAt: String

  updatedAt: String
}

"""
This is library type
"""
type Library {
  shelves: [ShelfType]

  total: Int

  currentPage: Int

  numberOfPages: Int
}

"""
This is get all categories type
"""
type AdminGetAllCategories {
  categories: [CategroyType]

  currentPage: Int

  numberOfPages: Int

  totalCompleted: Int

  totalUncompleted: Int

  total: Int
}

"""
This is get all categories type
"""
type GetAllCategories {
  categories: [CategroyType]

  currentPage: Int

  numberOfPages: Int

  total: Int
}

"""
This is book offer type
"""
type OfferType {
  _id: ID

  percent: Int

  expireAt: String

  book: BookInfo

  createdAt: String

  updatedAt: String
}

"""
this is get all offers
"""
type GetAllOffers {
  offers: [OfferType]

  currentPage: Int

  numberOfPages: Int

  total: Int
}

type Mutation {
  signup(userData: SignUpInput): SignUp

  verifyAccount("" email: String, "" otp: String): VerifyAccountType

  resendValidatingOTP("" email: String, "" lang: String): ResendValidatingOTPType

  signin("" email: String, "" password: String): SigninType

  forgetPassword("" email: String): ForgetPasswordType

  validateResetPasswordOTP("" email: String, "" otp: String): ValidateResetPasswordType

  resendResetPasswordOTP("" email: String): ResendResetPasswordOTPType

  resetPassword("" newPassword: String, "" oldPassword: String): ResetPassword

  updateUser("" name: String, "" oldPassword: String, "" newPassword: String): User

  deleteAccount: DeleteAccountType

  googleLogin("" google_token: String): GoogleLoginType

  addBookDetails("" name: String, "" description: String, "" isbn: String, "" edition: Int, "" language: String, "" publishingRights: Boolean, "" categories: [String], "" price: Float): UserBook

  editBookDetails("" bookId: String, "" name: String, "" description: String, "" isbn: String, "" edition: Int, "" language: String, "" publishingRights: Boolean, "" categories: [String], "" price: Float): UserBook

  moveBookToRecycleBin("" bookId: String): MoveBookToRecycleType

  moveBookFromRecycleBin("" bookId: String): MoveBookToRecycleType

  publishBook("" bookId: String): PublishBook

  adminReviewBookData("" bookId: String, "" status: String, "" content: String): AdminBookReview

  reviewBook("" bookId: ID, "" content: String, "" rate: Float): ReviewBookResponseType

  likeReview("" reviewId: String): LikeReview

  adminSignIn("" email: String, "" password: String): SignInAdminType

  adminRegister("" name: String, "" email: String, "" password: String): Admin

  adminUpdateAccount("" name: String, "" oldPassword: String, "" newPassword: String): Admin

  adminDeleteAccount: AdminDeleteAccount

  createShelf("" name: String): CreateShelfType

  addBookToShelf("" bookId: String, "" shelf: String): AddBookShelf

  removeBookFromShelf("" bookId: String, "" shelf: String): RemoveBookFromShelf

  removeShelf("" shelf: String): RemoveShelfType

  addCategory("" name_ar: String, "" name_en: String): CategroyType

  editCategory("" categoryId: String, "" name_ar: String, "" name_en: String): CategroyType

  deleteCategory("" categoryId: String): DeleteCategoryType

  addOffer("" bookId: String, "" percent: Int, "" expireAt: String): OfferType

  deleteOffer("" id: String): DeleteOfferType

  editOffer("" id: String, "" percent: Int, "" expireAt: String): OfferType
}

"""
sign up type
"""
type SignUp {
  message: String
}

input SignUpInput {
  name: String

  email: String

  password: String
}

"""
verify account type
"""
type VerifyAccountType {
  message: String

  success: Boolean
}

"""
resend validating otp type
"""
type ResendValidatingOTPType {
  message: String

  success: Boolean
}

"""
signin type
"""
type SigninType {
  message: String
  access_token: String
}

"""
forgetPassword type
"""
type ForgetPasswordType {
  message: String

  success: Boolean
}

"""
validate reset password type
"""
type ValidateResetPasswordType {
  message: String

  reset_token: String

  success: Boolean
}

"""
resend reset password otp type
"""
type ResendResetPasswordOTPType {
  message: String

  success: Boolean
}

"""
reset password type
"""
type ResetPassword {
  message: String
}

"""
this is the delete account type
"""
type DeleteAccountType {
  message: String

  deleted_id: String

  success: Boolean
}

type GoogleLoginType {
  message: String

  access_token: String
}

"""
this is the moved book to recycle bin type
"""
type MoveBookToRecycleType {
  message: String

  deleted_id: String

  success: Boolean
}

"""
this is the publish book type
"""
type PublishBook {
  message: String

  book: UserBook
}

"""
admin book review type
"""
type AdminBookReview {
  message: String

  success: Boolean
}

"""
this is review book response type
"""
type ReviewBookResponseType {
  message: String

  review: ReviewBook
}

"""
this like review mutation type
"""
type LikeReview {
  success: Boolean

  message: String
}

"""
admin sign in type
"""
type SignInAdminType {
  message: String

  access_token: String
}

"""
This is admin delet account type
"""
type AdminDeleteAccount {
  message: String

  deleted_id: String

  success: Boolean
}

"""
this is create shelf type
"""
type CreateShelfType {
  shelf: ShelfType

  message: String

  success: Boolean
}

"""
this add book shelf type
"""
type AddBookShelf {
  shelf: ShelfType

  message: String

  success: Boolean
}

"""
This is remove book from shelf type
"""
type RemoveBookFromShelf {
  shelf: ShelfType

  message: String

  success: Boolean
}

"""
This is remove shelf type
"""
type RemoveShelfType {
  success: String

  message: String
}

"""
This is delete category type
"""
type DeleteCategoryType {
  message: String

  success: Boolean
}

"""
this is delete offer type
"""
type DeleteOfferType {
  message: String

  success: Boolean
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByUrl: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https:\/\/commonmark.org\/)." reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
}
